#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotNet2020.Domain.Views.Calendar
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "Calendar.cshtml"
using Kendo.Mvc.UI;

#line default
#line hidden

#line 2 "Calendar.cshtml"
using DotNet2020.Domain.Models.ModelView;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class Calendar : CalendarBase
{

#line hidden

#line 3 "Calendar.cshtml"
public IndexViewModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<script");

WriteLiteral(" id=\"task-template\"");

WriteLiteral(" type=\"text/x-kendo-template\"");

WriteLiteral(">\r\n    <div style=\"background-color: #: kendo.toString(ColorId) #; height: 100%\">" +
"\r\n        <div class=\"k-event-template k-event-time\">12:00 AM - 12:00 AM</div>\r\n" +
"        <div class=\"k-event-template\"> </div>\r\n    </div>\r\n</script>\r\n\r\n<script");

WriteLiteral(" id=\"my-holiday\"");

WriteLiteral(" type=\"text/x-kendo-template\"");

WriteLiteral(">\r\n    <div style=\'background:#=getColorBasedOnHour(date)#; height: 100%;width: 1" +
"00%;\'></div>\r\n</script>\r\n\r\n<script>\r\n    function onDataBound(e) {\n        var v" +
"iew = this.view();\n        //view.times.hide();\n        view.timesHeader.hide();" +
"\n        $(\".k-scheduler-header-wrap > table > tbody > tr:eq(1)\").hide();\r\n\r\n   " +
"     var tables = $(\".k-scheduler-header-wrap .k-scheduler-table\");\r\n        tab" +
"les = tables.first();\n        var cells = tables.find(\"th\");\r\n        cells.each" +
"(function (e) {\r\n            var inner = $(this).text();\n            var day = i" +
"nner.split(\" \")[1];\n            $(this).text(day)\n        })\r\n    }\r\n</script>\r\n" +
"\r\n<script>//Custom View\r\n    (function ($, undefined) {\r\n        var kendo = win" +
"dow.kendo,\r\n            ui = kendo.ui,\r\n            SchedulerTimelineView = ui.T" +
"imelineView,\r\n            extend = $.extend,\r\n            NS = \".kendoTimelineYe" +
"arView\";\r\n\r\n        var SchedulerTimelineYearView = SchedulerTimelineView.extend" +
"({\r\n            nextDate: function () {\r\n                var start = this.startD" +
"ate();\r\n                return new Date(start.getFullYear() + 1, 0, 1);\r\n       " +
"     },\r\n            options: {\r\n                columnWidth: 1,\n            },\r" +
"\n            previousDate: function () {\r\n                var start = this.start" +
"Date();\r\n                return new Date(start.getFullYear() - 1, 0, 1);\r\n      " +
"      },\r\n            calculateDateRange: function () {\r\n                var sel" +
"ectedDate = this.options.date,\r\n                    start = new Date(selectedDat" +
"e.getFullYear(), 0, 1),\r\n                    end = kendo.date.previousDay(new Da" +
"te(selectedDate.getFullYear() + 1, 0, 1)),\r\n                    dates = [];\r\n\r\n " +
"               while (start <= end) {\r\n                    dates.push(start);\r\n " +
"                   start = kendo.date.nextDay(start);\r\n                }\r\n      " +
"          this._render(dates);\r\n            }\r\n        })\r\n\r\n        //extend UI" +
"\r\n        extend(true, ui, {\r\n            SchedulerTimelineYearView: SchedulerTi" +
"melineYearView\r\n        });\r\n\r\n    })(window.kendo.jQuery);\r\n</script>\r\n\r\n<div");

WriteLiteral(" class=\"legend\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-holiday\"");

WriteLiteral(">Праздники</div>\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-vacation\"");

WriteLiteral(">Новый отпуск</div>\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-vacation-approved\"");

WriteLiteral(">Отпуск</div>\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-illness\"");

WriteLiteral(">Новый больничный</div>\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-illness-approved\"");

WriteLiteral(">Больничный</div>\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-sickday\"");

WriteLiteral(">Сикдэй</div>\r\n</div>\r\n\r\n");


#line 85 "Calendar.cshtml"
Write(Html.Kendo().Scheduler<Kendo.Mvc.Examples.Models.Scheduler.CalendarEventViewModel>()
        .Name("calendar")
        .Date(DateTime.Now)
        .StartTime(new DateTime(DateTime.Now.Year, 1, 1))
        .MajorTick(2880)
        .Editable(false)
        .Footer(false)
        .Height(600)
        .EventTemplateId("task-template")
        .Events(e => e.DataBound("onDataBound"))
        .Views(views =>
        {
            views.TimelineMonthView(view => view.SlotTemplateId("my-holiday")).Title("Month").ColumnWidth(20);
            views.TimelineWeekView(view => view.SlotTemplateId("my-holiday")).Title("Week");
            views.CustomView("kendo.ui.SchedulerTimelineYearView", view => {
                var timeline = view;
                timeline.Title("Year");
                });
            // views.AgendaView();
        })
        .BindTo(Model.Events)
        .Group(group => group.Resources("Titles").Orientation(SchedulerGroupOrientation.Vertical))
        .Resources(resource =>
        {
            resource.Add(m => m.UserEmail)
                .Title("Title")
                .Name("Titles")
                .Multiple(true)
                .DataTextField("Name")
                .DataValueField("Email")
                .DataColorField("Color")
                .BindTo(Model.Users);
        })
        .DataSource(d => d
            .Model(m =>
            {
                m.Id(f => f.Id);
                m.Field(f => f.Title).DefaultValue("No title");
            })
        )
);


#line default
#line hidden
WriteLiteral(@"


<style>


    .k-event, .k-task-complete {
        color: #fff;
        background: yellow;
        border-color: #24c6db;
    }

    .k-scheduler-dayview .k-today.k-nonwork-hour, .k-scheduler-table .k-nonwork-hour, .k-scheduler-timelineview .k-today.k-nonwork-hour {
        background-color: gray;
        opacity: .3;
    }

    .k-scheduler-table td, .k-scheduler-table th {
        padding: 0;
        opacity: .5;
    }
</style>

<script>

    async function getData(ajaxurl) {
        return await $.ajax({
            url: ajaxurl,
            type: 'GET',
        });
    };


    function getColorBasedOnHour(date) {
        const holidays = JSON.parse('");


#line 159 "Calendar.cshtml"
                                Write(Html.Raw(Json.Serialize(@Model.Holidays)));


#line default
#line hidden
WriteLiteral(@"')

        console.log(holidays)
        var month = date.getUTCMonth() + 1;
        var day = date.getUTCDate() + 1;
        var year = date.getUTCFullYear();

        newdate = year + ""/"" + month + ""/"" + day;
        if (holidays.includes(newdate)) {
            console.log('holiday')
            console.log(newdate)
            return ""red"";
        }
    }
</script>");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class CalendarBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
