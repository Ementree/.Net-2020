@using Kendo.Mvc.UI
@using DotNet2020.Domain.Models.ModelView
@model IndexViewModel

<script id="task-template" type="text/x-kendo-template">
    <div style="background-color: #: kendo.toString(ColorId) #; height: 100%">
        <div class="k-event-template k-event-time">12:00 AM - 12:00 AM</div>
        <div class="k-event-template"> </div>
    </div>
</script>

<script id="my-holiday" type="text/x-kendo-template">
    <div style='background:#=getColorBasedOnHour(date)#; height: 100%;width: 100%;'></div>
</script>

<script>//Custom View
    (function ($, undefined) {
        var kendo = window.kendo,
            ui = kendo.ui,
            SchedulerTimelineView = ui.TimelineView,
            extend = $.extend,
            NS = ".kendoTimelineYearView";

        var SchedulerTimelineYearView = SchedulerTimelineView.extend({
            nextDate: function () {
                var start = this.startDate();
                return new Date(start.getFullYear() + 1, 0, 1);
            },
            previousDate: function () {
                var start = this.startDate();
                return new Date(start.getFullYear() - 1, 0, 1);
            },
            calculateDateRange: function () {
                var selectedDate = this.options.date,
                    start = new Date(selectedDate.getFullYear(), 0, 1),
                    end = kendo.date.previousDay(new Date(selectedDate.getFullYear() + 1, 0, 1)),
                    dates = [];

                while (start <= end) {
                    dates.push(start);
                    start = kendo.date.nextDay(start);
                }
                this._render(dates);
            }
        })

        //extend UI
        extend(true, ui, {
            SchedulerTimelineYearView: SchedulerTimelineYearView
        });

    })(window.kendo.jQuery);</script>

<div class="legend">
    <div class="color-box legend-item-holiday">Праздники</div>
    <div class="color-box legend-item-vacation">Новый отпуск</div>
    <div class="color-box legend-item-vacation-approved">Отпуск</div>
    <div class="color-box legend-item-illness">Новый больничный</div>
    <div class="color-box legend-item-illness-approved">Больничный</div>
    <div class="color-box legend-item-sickday">Сикдэй</div>
</div>

@(Html.Kendo().Scheduler<Kendo.Mvc.Examples.Models.Scheduler.CalendarEventViewModel>()
        .Name("calendar")
        .Date(DateTime.Now)
        .StartTime(new DateTime(DateTime.Now.Year, 1, 1))
        .MajorTick(2880)
        .Editable(false)
        .Footer(false)
        .Height(600)
        .EventTemplateId("task-template")
        .Views(views =>
        {
            views.TimelineView(view => view.SlotTemplateId("my-holiday")).ColumnWidth
            views.TimelineMonthView(view => view.SlotTemplateId("my-holiday")).Title("Month").ColumnWidth(50);
            views.TimelineWeekView(view => view.SlotTemplateId("my-holiday")).Title("Week");
            views.CustomView("kendo.ui.SchedulerTimelineYearView", view => {
                var timeline = (object)view as Kendo.Mvc.UI.Fluent.SchedulerTimelineViewBuilderBase<SchedulerTimelineView, Kendo.Mvc.UI.Fluent.SchedulerTimelineViewBuilder>;
                timeline.Title("Year");
                timeline.ColumnWidth(50);
                });
            // views.AgendaView();
        })
        .BindTo(Model.Events)
        .Group(group => group.Resources("Titles").Orientation(SchedulerGroupOrientation.Vertical))
        .Resources(resource =>
        {
            resource.Add(m => m.UserEmail)
                .Title("Title")
                .Name("Titles")
                .Multiple(true)
                .DataTextField("Name")
                .DataValueField("Email")
                .DataColorField("Color")
                .BindTo(Model.Users);
        })
        .DataSource(d => d
            .Model(m =>
            {
                m.Id(f => f.Id);
                m.Field(f => f.Title).DefaultValue("No title");
            })
        )
)


<style>


    .k-event, .k-task-complete {
        color: #fff;
        background: yellow;
        border-color: #24c6db;
    }

    .k-scheduler-dayview .k-today.k-nonwork-hour, .k-scheduler-table .k-nonwork-hour, .k-scheduler-timelineview .k-today.k-nonwork-hour {
        background-color: gray;
        opacity: .3;
    }

    .k-scheduler-table td, .k-scheduler-table th {
        padding: 0;
        opacity: .5;
    }
</style>

<script>

    async function getData(ajaxurl) {
        return await $.ajax({
            url: ajaxurl,
            type: 'GET',
        });
    };


    function getColorBasedOnHour(date) {
        const holidays = JSON.parse('@Html.Raw(Json.Serialize(@Model.Holidays))')

        console.log(holidays)
        var month = date.getUTCMonth() + 1;
        var day = date.getUTCDate() + 1;
        var year = date.getUTCFullYear();

        newdate = year + "/" + month + "/" + day;
        if (holidays.includes(newdate)) {
            console.log('holiday')
            console.log(newdate)
            return "red";
        }
    }
</script>