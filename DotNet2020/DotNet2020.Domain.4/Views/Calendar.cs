#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotNet2020.Domain.Views.Calendar
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "Calendar.cshtml"
using Kendo.Mvc.UI;

#line default
#line hidden

#line 2 "Calendar.cshtml"
using DotNet2020.Domain.Models.ModelView;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class Calendar : CalendarBase
{

#line hidden

#line 3 "Calendar.cshtml"
public IndexViewModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<script");

WriteLiteral(" id=\"task-template\"");

WriteLiteral(" type=\"text/x-kendo-template\"");

WriteLiteral(">\r\n    <div style=\"background-color: #: kendo.toString(ColorId) #; height: 100%\">" +
"\r\n        <div class=\"k-event-template k-event-time\">12:00 AM - 12:00 AM</div>\r\n" +
"        <div class=\"k-event-template\"> </div>\r\n    </div>\r\n</script>\r\n\r\n<script");

WriteLiteral(" id=\"my-holiday\"");

WriteLiteral(" type=\"text/x-kendo-template\"");

WriteLiteral(">\r\n    <div style=\'background:#=getColorBasedOnHour(date)#; height: 100%;width: 1" +
"00%;\'></div>\r\n</script>\r\n\r\n<script>\r\n    function onDataBound(e) {\n        var v" +
"iew = this.view();\n        if (view.title !== \"Year\") {\n            //view.times" +
".hide();\n            view.timesHeader.hide();\n            $(\".k-scheduler-header" +
"-wrap > table > tbody > tr:eq(1)\").hide();\r\n\r\n            var tables = $(\".k-sch" +
"eduler-header-wrap .k-scheduler-table\");\r\n            tables = tables.first();\n " +
"           var cells = tables.find(\"th\");\r\n\r\n            cells.each(function (e)" +
" {\r\n                var inner = $(this).text();\n                var day = inner." +
"split(\" \")[1];\n                $(this).text(day)\n            })\n        }\r\n    }" +
"\r\n</script>\r\n\r\n<script>\r\n    var WeeksTimelineGroupedView = kendo.ui.scheduler.T" +
"imelineGroupedView.extend({\n        _addContent: function (dates, columnCount, g" +
"roupsCount, rowCount, start, end, slotTemplate, isVerticalGrouped) {\n\n          " +
"  var view = this._view;\n            var html = \'\';\n\n            for (var rowIdx" +
" = 0; rowIdx < rowCount; rowIdx++) {\n                html += \'<tr>\';\n           " +
"     for (var groupIdx = 0; groupIdx < groupsCount; groupIdx++) {\n              " +
"      for (idx = 0; idx < dates.length; idx += 7) {\n                        html" +
" += \'<td> </td>\';\n                    }\n                }\n                html +" +
"= \'</tr>\';\n            }\n            return html;\n        },\n        _addTimeSlo" +
"tsCollections: function (groupCount, tableRows) {\n\n            var view = this._" +
"view;\n\n            for (var groupIndex = 0; groupIndex < groupCount; groupIndex+" +
"+) {\n                var cells = tableRows[groupIndex].children;\n               " +
" var day = view._startDate;\n                var ci = 0;\n                var coll" +
"ection = view.groups[groupIndex].getTimeSlotCollection(0);\n\n                whil" +
"e (day < view._endDate) {\n                    cells[ci].setAttribute(\'role\', \'gr" +
"idcell\');\n                    cells[ci].setAttribute(\'aria-selected\', false);\n\n " +
"                   collection.addTimeSlot(cells[ci], day, kendo.date.addDays(day" +
", 7), true);\n                    day = kendo.date.addDays(day, 7);\n             " +
"       ci++;\n                }\n            }\n        },\n        // don\'t hide he" +
"aders\n        _hideHeaders: function () {\n                  var view = this._vie" +
"w;\n                  view.timesHeader.find(\'table tr:last\').hide();\n            " +
"      view.datesHeader.find(\'table tr:last\').hide();\n        }\n    });\n\n    // w" +
"eeknumber function from https://stackoverflow.com/questions/6117814/get-week-of-" +
"year-in-javascript-like-in-php\n    // because kendo.date.weekInYear is returning" +
" invalid results\n    function getWeekInfo(d) {\n        // Copy date so don\'t mod" +
"ify original\n        d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getD" +
"ate()));\n        // Set to nearest Thursday: current date + 4 - current day numb" +
"er\n        // Make Sunday\'s day number 7\n\n        var thurs = d.getUTCDate() + 4" +
" - (d.getUTCDay() || 7)\n        d.setUTCDate(thurs);\n\n        // Get first day o" +
"f year\n\n        var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n  " +
"      // Calculate full weeks to nearest Thursday\n        var weekNo = Math.ceil" +
"((((d - yearStart) / 86400000) + 1) / 7);\n\n        // Return week number, month " +
"and year\n        return {\n            week: weekNo,\n            month: d.getMont" +
"h(),\n            year: d.getUTCFullYear()\n        };\n    };\n\n    var WeekYearVie" +
"w = kendo.ui.TimelineView.extend({\n        _getGroupedView: function () {\n\n     " +
"       return new WeeksTimelineGroupedView(this);\n        },\n\n        name: \"Yea" +
"r\",\n\n        options: {\n            columnWidth: 15,\n            currentTimeMark" +
"er: true,\n            height: 700\n        },\n\n        previousDate: function () " +
"{\n            var s = this.startDate();\n            return kendo.date.dayOfWeek(" +
"kendo.date.addDays(s, -30), 1, -1);\n        },\n\n        // advance by.... one mo" +
"nth?\n        nextDate: function () {\n            var s = this.startDate();\n     " +
"       return kendo.date.dayOfWeek(kendo.date.addDays(s, 30), 1, -1);\n        }," +
"\n\n        // make it one year, from the monday starting with selected date\n\n    " +
"    calculateDateRange: function () {\n             var selectedDate = this.optio" +
"ns.date,\r\n                    start = new Date(selectedDate.getFullYear(), 0, 1)" +
",\r\n                    end = kendo.date.previousDay(new Date(selectedDate.getFul" +
"lYear() + 1, 0, 1)),\r\n                    dates = [];\r\n\r\n                while (" +
"start <= end) {\r\n                    dates.push(start);\r\n                    sta" +
"rt = kendo.date.nextDay(start);\r\n                }\r\n                this._render" +
"(dates);\n        },\n\n        // make proper slots\n        _calculateSlotRanges: " +
"function () {\n\n            var dates = this._dates;\n            var slotStartTim" +
"e = this.startTime();\n            var slotEndTime = this.endTime();\n\n           " +
" slotEndTime = kendo.date.getMilliseconds(slotEndTime);\n            slotStartTim" +
"e = kendo.date.getMilliseconds(slotStartTime);\n\n            if (slotEndTime === " +
"slotStartTime) {\n                slotEndTime += kendo.date.MS_PER_DAY - 1;\n     " +
"       } else if (slotEndTime < slotStartTime) {\n                slotEndTime += " +
"kendo.date.MS_PER_DAY;\n            }\n\n            var slotRanges = [];\n\n        " +
"    // week long slots?\n            for (var i = 0; i < dates.length; i += 7) {\n" +
"                var rangeStart = kendo.date.getDate(dates[i]);\n                k" +
"endo.date.setTime(rangeStart, slotStartTime);\n                var rangeEnd = ken" +
"do.date.getDate(dates[i]);\n                kendo.date.setTime(rangeEnd, slotEndT" +
"ime);\n\n                slotRanges.push({\n                    start: kendo.date.t" +
"oUtcTime(rangeStart),\n                    end: kendo.date.toUtcTime(rangeEnd)\n  " +
"              });\n            }\n\n            this._slotRanges = slotRanges;\n    " +
"    },\n\n        _layout: function (dates) {\n\n            var columns = [];\n     " +
"       var that = this;\n            var rows = [{ text: that.options.messages.de" +
"faultRowText }];\n            var groupedView = that._groupedView;\n\n            /" +
"/ loop months over weeks\n            for (var idx = 0; idx < dates.length; idx++" +
") {\n                var info = getWeekInfo(dates[idx]);\n\n                // has " +
"year column already?\n                for (var yIdx = 0; yIdx < columns.length; y" +
"Idx++) {\n                    if (columns[yIdx].yearNum == info.year) break;\n    " +
"            }\n\n                if (yIdx >= columns.length) {\n                   " +
" var yr = {\n                        text: info.year,\n                        cla" +
"ssName: \'k-slot-cell\',\n                        columns: [],\n                    " +
"    weeks: [],\n                        yearNum: info.year,\n                     " +
"   colspan: 1\n                    };\n\n                    columns.push(yr);\n    " +
"                yIdx = columns.length - 1;\n                } else {\n            " +
"        columns[yIdx].colspan++;\n                }\n\n                // has month" +
" column already?\n                for (var mIdx = 0; mIdx < columns[yIdx].columns" +
".length; mIdx++) {\n                    if (columns[yIdx].columns[mIdx].monthNum " +
"== info.month) break;\n                }\n\n                if (mIdx >= columns[yId" +
"x].columns.length) {\n                    var mn = {\n                        //ge" +
"t some localization here please\n                        text: new Date(2018, inf" +
"o.month, 1).toLocaleString(\"en-us\", { month: \"short\" }),\n                       " +
" className: \'k-slot-cell\',\n                        columns: [],\n                " +
"        monthNum: info.month,\n                        colspan: 1\n               " +
"     };\n\n                    columns[yIdx].columns.push(mn);\n                   " +
" mIdx = columns[yIdx].columns.length - 1;\n                } else {\n             " +
"       columns[yIdx].columns[mIdx].colspan++;\n                }\n\n               " +
" // has timeslot already?\n                for (var wIdx = 0; wIdx < columns[yIdx" +
"].weeks.length; wIdx++) {\n                    if (columns[yIdx].weeks[wIdx] == i" +
"nfo.week) break;\n                }\n\n                if (wIdx >= columns[yIdx].we" +
"eks.length) {\n                    var ts = {\n                        text: info." +
"week,\n                        className: \'k-slot-cell\',\n                        " +
"colspan: 1,\n                        weekNum: info.week\n                    }\n\n  " +
"                  columns[yIdx].weeks.push(info.week);\n                    colum" +
"ns[yIdx].columns[mIdx].columns.push(ts);\n                    weekColumn = ts;\n  " +
"              } else {\n                    weekColumn.colspan++;\n               " +
" }\n            }\n\n            var resources = this.groupedResources;\n\n          " +
"  if (resources.length) {\n                if (this._groupOrientation() === \'vert" +
"ical\') {\n                    rows = groupedView._createRowsLayout(resources, nul" +
"l, this.groupHeaderTemplate, columns);\n                    columns = groupedView" +
"._createVerticalColumnsLayout(resources, null, this.groupHeaderTemplate, columns" +
");\n                } else {\n                    columns = groupedView._createCol" +
"umnsLayout(resources, columns, this.groupHeaderTemplate, columns);\n             " +
"   }\n            }\n            return {\n                columns: columns,\n      " +
"          rows: rows\n            };\n        },\n        _groups: function () {\n\n " +
"           var groupCount = this._groupCount();\n            var dates = this._da" +
"tes;\n            this.groups = [];\n\n            for (var idx = 0; idx < groupCou" +
"nt; idx++) {\n                var view = this._addResourceView(idx);\n            " +
"    var start = dates[0];\n                var end = dates[dates.length - 1 || 0]" +
";\n                var startTime = kendo.date.getMilliseconds(this.startTime());\n" +
"                var endTime = kendo.date.getMilliseconds(this.endTime());\n\n     " +
"           if (startTime !== 0 && endTime <= startTime) {\n                    st" +
"art = kendo.date.getDate(start);\n                    kendo.date.setTime(start, s" +
"tartTime);\n                    end = kendo.date.getDate(end);\n                  " +
"  kendo.date.setTime(end, endTime);\n                }\n\n                view.addT" +
"imeSlotCollection(start, kendo.date.addDays(end, 1));\n            }\n\n           " +
" this._timeSlotGroups(groupCount);\n        },\n        _timeSlotGroups: function " +
"(groupCount) {\n\n            var tableRows = this.content.find(\'tr\');\n           " +
" tableRows.attr(\'role\', \'row\');\n            this._groupedView._addTimeSlotsColle" +
"ctions(groupCount, tableRows);\n        }\n    });\r\n</script>\r\n\r\n<div");

WriteLiteral(" class=\"legend\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-holiday\"");

WriteLiteral(">Праздники</div>\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-vacation\"");

WriteLiteral(">Новый отпуск</div>\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-vacation-approved\"");

WriteLiteral(">Отпуск</div>\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-illness\"");

WriteLiteral(">Новый больничный</div>\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-illness-approved\"");

WriteLiteral(">Больничный</div>\r\n    <div");

WriteLiteral(" class=\"color-box legend-item-sickday\"");

WriteLiteral(">Сикдэй</div>\r\n</div>\r\n\r\n");


#line 314 "Calendar.cshtml"
Write(Html.Kendo().Scheduler<Kendo.Mvc.Examples.Models.Scheduler.CalendarEventViewModel>()
        .Name("calendar")
        .Date(DateTime.Now)
        .StartTime(new DateTime(DateTime.Now.Year, 1, 1))
        .MajorTick(2880)
        .Editable(false)
        .Footer(false)
        .Height(600)
        .EventTemplateId("task-template")
        .Events(e => e.DataBound("onDataBound"))
        .Views(views =>
        {
            views.TimelineMonthView(view => view.SlotTemplateId("my-holiday")).Title("Month").ColumnWidth(20);
            views.TimelineWeekView(view => view.SlotTemplateId("my-holiday")).Title("Week");
            views.CustomView("WeekYearView", view => view.Selected(true).Title("Year"));
        })
        .BindTo(Model.Events)
        .Group(group => group.Resources("Titles").Orientation(SchedulerGroupOrientation.Vertical))
        .Resources(resource =>
        {
            resource.Add(m => m.UserEmail)
                .Title("Title")
                .Name("Titles")
                .Multiple(true)
                .DataTextField("Name")
                .DataValueField("Email")
                .DataColorField("Color")
                .BindTo(Model.Users);
        })
        .DataSource(d => d
            .Model(m =>
            {
                m.Id(f => f.Id);
                m.Field(f => f.Title).DefaultValue("No title");
            })
        )
);


#line default
#line hidden
WriteLiteral(@"


<style>
    .k-event, .k-task-complete {
        color: #fff;
        background: yellow;
        border-color: #24c6db;
    }

    .k-scheduler-dayview .k-today.k-nonwork-hour, .k-scheduler-table .k-nonwork-hour, .k-scheduler-timelineview .k-today.k-nonwork-hour {
        background-color: gray;
        opacity: .3;
    }

    .k-scheduler-table td, .k-scheduler-table th {
        padding: 0;
        opacity: .5;
    }
</style>

<script>
    function getColorBasedOnHour(date) {
        const holidays = JSON.parse('");


#line 373 "Calendar.cshtml"
                                Write(Html.Raw(Json.Serialize(@Model.Holidays)));


#line default
#line hidden
WriteLiteral(@"')

        var month = date.getUTCMonth() + 1;
        var day = date.getUTCDate() + 1;
        var year = date.getUTCFullYear();

        newdate = year + ""/"" + month + ""/"" + day;
        if (holidays.includes(newdate)) {
            return ""red"";
        }
    }
</script>");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class CalendarBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
